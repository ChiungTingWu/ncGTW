gaussFilter <- function(prof, sig = 1){
  sz <- ceiling(sig * 6)    # length of gaussian filter vector
  if (sz < 2){
    sz <- 2
  }
  if (sz %% 2 != 0){
    sz <- sz + 1
  }
  x <- seq(-sz / 2, sz / 2, length = sz + 1)
  filterVec <- exp(-x ^ 2 / (2 * sig ^ 2))
  filterVec <- filterVec / sum (filterVec) # normalize
  filtered <- convolve(prof, filterVec, type = 'open')
  return(filtered[(sz / 2 + 1):(length(filtered) - sz / 2)])
}

rt2scan <- function(rt, rtAll)
  return(which.min(abs(rtAll - rt)))

smoTest <- function(xcmsLargeWin, groupInd, dataSub, scanRange, sampleInd, path2){
  # groupInd = 176;
  # sampleInd = parInd[1:parNum[n], n]
  peaks <- xcmsLargeWin@peaks
  groupidx <- xcmsLargeWin@groupidx
  rtXCMS <- xcmsLargeWin@rt$corrected
  rtRaw <- xcmsLargeWin@rt$raw

  prePeaks <- peaks[groupidx[[groupInd]], ]
  prePeaks <- prePeaks[is.element(prePeaks[ , 'sample'], sampleInd), ]
  prePeakInd <- prePeaks[ , 'sample']

  if (length(prePeaks) == 0){
    statRes <- matrix(-1, 3, 3)
  } else{
    prePeakMed <- prePeaks[, 'rt']

    sampleCount <- table(prePeakInd)
    groupNum <- max(sampleCount)
    groupSam <- as.numeric(names(sampleCount)[which.max(sampleCount)])
    if (groupNum != 1)
      groupSam <- as.numeric(names(sampleCount)[which(sampleCount == groupNum)])

    if (length(groupSam)>1){
      maxRange <- 0
      maxInd <- 0
      for (ind in 1:length(groupSam)){
        samPeaks <- prePeaks[prePeakInd ==  groupSam[ind], 'rt']
        if (max(samPeaks) - min(samPeaks) > maxRange){
          maxRange <- max(samPeaks) - min(samPeaks)
          maxInd <- groupSam[ind]
        }
      }
      groupSam <- if (maxRange == 0) groupSam[1] else maxInd
    }

    kmeansPreInd <- kmeans(prePeaks[, c('rt', 'rtmax', 'rtmin')],
                           prePeaks[prePeakInd == groupSam, c('rt', 'rtmax', 'rtmin'), drop = FALSE])

    oriPeakGroup <- vector('list', groupNum)
    XCMSPeakGroup <- vector('list', groupNum)
    ncGTWPeakGroup <- vector('list', groupNum)

    for (n in 1:groupNum)
      XCMSPeakGroup[[n]] <- prePeakMed[kmeansPreInd$cluster == n]

    ncGTWPeakMed <- prePeakMed * 0
    oriPeakMed <- prePeakMed * 0

    for (n in 1:length(ncGTWPeakMed)){
      samInd <- prePeaks[n, 'sample']
      samSubInd <- which(sampleInd == prePeaks[n, 'sample'])

      indDif <- abs(scanRange[samInd, ] - rt2scan(prePeakMed[n], rtXCMS[[samInd]]))
      minIndDif <- min(indDif)
      medInd <- which(indDif == minIndDif)
      medInd <- medInd[which.max(dataSub[samSubInd, medInd])]

      if (medInd - 5 < 1){
        staInd <- 1
      } else {
        staInd <- medInd - 5
      }
      if (medInd + 5 > dim(dataSub)[2]){
        endInd <- dim(dataSub)[2]
      } else{
        endInd <- medInd + 5
      }
      apexRange <- staInd:endInd
      apexInd <- apexRange[which.max(dataSub[samSubInd, apexRange])]
      oriPeakMed[n] <- rtRaw[[samInd]][scanRange[samInd, apexInd]]

      samPath <- path2[[samSubInd]]
      ncGTWPeakMed[n] <- rtRaw[[samInd]][scanRange[samInd, round(mean(
        samPath[which(samPath[ , 2] == apexInd), 1]))]]

    }
    oriPeakRt <- cbind(oriPeakMed, prePeaks[, 'rtmin'] - prePeakMed + oriPeakMed,
                       prePeaks[, 'rtmax'] - prePeakMed + oriPeakMed)
    ncGTWPeakRt <- cbind(ncGTWPeakMed, prePeaks[, 'rtmin'] - prePeakMed + ncGTWPeakMed,
                       prePeaks[, 'rtmax'] - prePeakMed + ncGTWPeakMed)

    kmeansOriInd <- kmeans(oriPeakRt, oriPeakRt[prePeakInd == groupSam, , drop = FALSE])
    kmeansncGTWInd <- kmeans(ncGTWPeakRt, ncGTWPeakRt[prePeakInd == groupSam, , drop = FALSE])

    for (n in 1:groupNum){
      oriPeakGroup[[n]] <- oriPeakMed[kmeansOriInd$cluster == n]
      ncGTWPeakGroup[[n]] <- ncGTWPeakMed[kmeansncGTWInd$cluster == n]
    }

    statResult <- matrix(0, 3, 2)
    statResult[1, 1] <- sum(sapply(oriPeakGroup, var), na.rm = TRUE)
    statResult[2, 1] <- sum(sapply(XCMSPeakGroup, var), na.rm = TRUE)
    statResult[3, 1] <- sum(sapply(ncGTWPeakGroup, var), na.rm = TRUE)
    statResult[1, 2] <- max(sapply(oriPeakGroup, function(x) range(x)[2] - range(x)[1]))
    statResult[2, 2] <- max(sapply(XCMSPeakGroup, function(x) range(x)[2] - range(x)[1]))
    statResult[3, 2] <- max(sapply(ncGTWPeakGroup, function(x) range(x)[2] - range(x)[1]))
  }
  return(statResult)

}
